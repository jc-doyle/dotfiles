# Movement
map gc cd ~/university/CSC3002
map gm cd ~/university/CSC3022
map gM cd ~/university/MAM2000/

map gT cd ~/.local/share/Trash/
map gl cd ~/.local/share/

map gS cd ~/.scripts/
map gC cd ~/.cache/

map gd cd ~/downloads
map gs cd ~/sync

map g<gt> cd ~/.config
map g. cd ~/other/dotfiles/config
map gN cd ~/.config/nvim/lua
map gP cd ~/.local/share/nvim/site/pack/packer
map gD cd ~/.config/dwm

# General Settings
set icons
set period 1
set scrolloff 10
set drawbox true
set ratios 2:3
set previewer ~/.config/lf/preview.sh
set errorfmt "\033[0;33;40m%s\033[0m"

# Z shell specific settings
set shell zsh
set shellopts '-euy'
set ifs "\n"

# Commands
# Creating and Editing Dirs
cmd folder %mkdir "$@"
cmd file %touch "$@"

cmd chmod ${{
    printf "Mode: "
    read ans
    for file in "$fx"
    do
      chmod $ans $file
    done
}}

# Open
cmd open ${{
    case $(xdg-mime query filetype $f) in
        application/*spreadsheet*) sc-im $fx;;
        application/x-sc) sc-im $fx;;
        application/pdf) zathura $fx;;
        application/epub*) zathura $fx;;
        image/*) sxiv -b $fx;;
        video/*) mpv $fx;;
        inode/x-empty) nvim $fx;;
        text/csv) sc-im $fx;;
        text/*) nvim $fx;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac }}

# Delete/Restore
cmd trash %trash-put $fx
cmd restore $trash-restore

# Extract
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# Tar
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# Zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
cmd link %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    case "$mode" in
        # symbolically copy mode is indicating a soft link
        copy) ln -sr -t . -- "$@";;
        # while a move mode is indicating a hard link
        move) ln -t . -- "$@";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Bulk Rename
cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -n "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new")" -ne "$(wc -l "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# New Folder w/ Selected Files
cmd newfold ${{
    set -f
    read newd
    mkdir -- "$newd"
    mv -- $fx "$newd"
}}
map <a-n> newfold
# Mappings

# Extract/Zip
map Zu extract
map Zz zip
map Zt tar

# Paste Link
map P :link


# View Size
map zS %du -sh $f

# General 
map <esc> quit
map <enter> shell

# Execute/Chmod
map xX $$f
map xx !$f
map xM chmod
map xm $chmod +x $f

# Neovim
map <c-n> $nvim $fx

# Sudoedit
map S $sudoedit $fx

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# New Files
map N push :folder<space>
map n push :file<space>

map W $zsh /home/jonty/.scripts/setbg $f 

map A rename # at the very end
map r push A<c-u> # new rename
map I push A<c-a> # at the very beginning
map i push A<a-b><a-b><a-f> # before extention
map a push A<a-b> # after extention
map R bulk-rename

map D trash
map U restore
